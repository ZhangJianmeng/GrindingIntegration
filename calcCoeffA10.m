function [a1,a2,a3,a4,a5,a6,a7,a8,a9,a10] = calcCoeffA10(obj,t)
    %赋值操作
    M = obj.calcTransMatrix(t);
    Mt = obj.calcTransMatrixDot(t);
    M11 = M(1,1); M12 = M(1,2); M13 = M(1,3);
    M21 = M(2,1); M22 = M(2,2); M23 = M(2,3);
                  M32 = M(3,2); M33 = M(3,3); M34 = M(3,4);

    
    Mt11 = Mt(1,1); Mt12 = Mt(1,2); Mt13 = Mt(1,3); Mt14 = Mt(1,4);
    Mt21 = Mt(2,1); Mt22 = Mt(2,2); Mt23 = Mt(2,3); Mt24 = Mt(2,4);
                    Mt32 = Mt(3,2); Mt33 = Mt(3,3); Mt34 = Mt(3,4);
    
    z0 = obj.workpiece.zOmega;
    R1 = obj.cutter.R1;
    R2 = obj.cutter.R2;
    
    %计算系数 a1-a10
    a1 = M32^3*(-2*M23*Mt11 + 2*M13*Mt21)*R1*R2^2 + M32^2*(2*M22*M33*Mt11 - 2*M12*M33*Mt21)*R1*R2^2;
     
    a2 = M32^3*(-(M23*Mt11) + M13*Mt21)*R2^3 + M32^2*(M22*M33*Mt11 - M12*M33*Mt21)*R2^3;
     
    a3 = M32^3*(M21*Mt13 - M11*Mt23)*R1*R2^2 + M32*(M12*M21*M33*Mt32 - M11*M22*M33*Mt32)*R1*R2^2 + ...
         M32^2*(-(M21*M33*Mt12) - M12*M21*Mt33 + M11*(M33*Mt22 + M22*Mt33))*R1*R2^2;
     
    a4 = M32^3*(M21*Mt13 - M11*Mt23)*R2^3 + ...
         (-M22*M33^3*Mt11 - M21*M33^3*Mt12 + M12*M33^3*Mt21 + M13*M21*M33^2*Mt32 + M11*(M33^3*Mt22 - M23*M33^2*Mt32))*R2^3 + ...
         M32^2*(-M21*M33*Mt12 - M12*M21*Mt33 + M11*(M33*Mt22 + M22*Mt33))*R2^3 + ...
         M32*(M23*M33^2*Mt11 + M21*M33^2*Mt13 + M12*M21*M33*Mt32 + M13*(-M33^2*Mt21 - M21*M33*Mt33) + ...
              M11*(-M33^2*Mt23 - M22*M33*Mt32 + M23*M33*Mt33))*R2^3;
    
    a5 = M32^3*(-M21*Mt11 + M11*Mt21)*R1*R2;
    
    a6 = M32^3*(-M21*Mt11 + M23*Mt13 + M11*Mt21 - M13*Mt23)*R2^2 + ...
         M32*(-M21*M33^2*Mt11 + M22*M33^2*Mt12 + M11*M33^2*Mt21 - M13*M22*M33*Mt32 + M12*(-M33^2*Mt22 + M23*M33*Mt32))*R2^2 + ...
         M32^2*(-M23*M33*Mt12 - M22*M33*Mt13 + M13*(M33*Mt22 + M22*Mt33) + M12*(M33*Mt23 - M23*Mt33))*R2^2;
    
    a7 = M32^3*((-M23*Mt14 + M13*Mt24)*R2 + (-M23*Mt13 + M13*Mt23)*R2^2) + ...
         M32^2*((M23*M33*Mt12 + M22*M33*Mt13 + M13*(-(M33*Mt22) - M22*Mt33) + M12*(-(M33*Mt23) + M23*Mt33))*R2^2 + ...
         R2*(M22*M33*Mt14 + M12*(-(M33*Mt24) + M23*Mt34) + M23*(M34*Mt12 - Mt12*z0) + M13*(-(M34*Mt22) - M22*Mt34 + Mt22*z0))) + ...
         M32*((M21*M33^2*Mt11 - M22*M33^2*Mt12 - M11*M33^2*Mt21 + M13*M22*M33*Mt32 + M12*(M33^2*Mt22 - M23*M33*Mt32))*R2^2 + ...
         R2*(M21*M33*(M34*Mt11 - Mt11*z0) + M22*M33*(-(M34*Mt12) + Mt12*z0) + M11*M33*(-M34*Mt21 + Mt21*z0) + M13*M22*(M34*Mt32 - Mt32*z0) + ...
         M12*(M33*(M34*Mt22 - Mt22*z0) + M23*(-M34*Mt32 + Mt32*z0))));
    
    a8 = M32^3*(-M23*Mt11 + M13*Mt21)*R1^2*R2 + M32^2*(M22*M33*Mt11 - M12*M33*Mt21)*R1^2*R2 + ...
         (-M22*M33^3*Mt11 - M21*M33^3*Mt12 + M12*M33^3*Mt21 + M13*M21*M33^2*Mt32 + M11*(M33^3*Mt22 - M23*M33^2*Mt32))*R2^3 + ...
         R2^2*(M22*M33^2*(-2*M34*Mt11 + 2*Mt11*z0) + M21*M33^2*(-2*M34*Mt12 + 2*Mt12*z0) + M12*M33^2*(2*M34*Mt21 - 2*Mt21*z0) + M13*M21*M33*(2*M34*Mt32 - 2*Mt32*z0) + ...
         M11*(M33^2*(2*M34*Mt22 - 2*Mt22*z0) + M23*M33*(-2*M34*Mt32 + 2*Mt32*z0))) + ...
         R2*(M22*M33*(-(M34^2*Mt11) + 2*M34*Mt11*z0 - Mt11*z0^2) + M21*M33*(-(M34^2*Mt12) + 2*M34*Mt12*z0 - Mt12*z0^2) + M12*M33*(M34^2*Mt21 - 2*M34*Mt21*z0 + Mt21*z0^2) + ...
         M13*M21*(M34^2*Mt32 - 2*M34*Mt32*z0 + Mt32*z0^2) + M11*(M33*(M34^2*Mt22 - 2*M34*Mt22*z0 + Mt22*z0^2) + M23*(-(M34^2*Mt32) + 2*M34*Mt32*z0 - Mt32*z0^2))) + ...
         M32*((M23*M33^2*Mt11 + M21*M33^2*Mt13 + M13*(-(M33^2*Mt21) - M21*M33*Mt33) + M11*(-(M33^2*Mt23) + M23*M33*Mt33))*R2^3 + ...
         R2^2*(M23*M33*(2*M34*Mt11 - 2*Mt11*z0) + M21*(M33^2*Mt14 + M33*(M34*Mt13 - Mt13*z0)) + M11*(-(M33^2*Mt24) + M33*(-(M34*Mt23) + Mt23*z0) + M23*(M34*Mt33 + M33*Mt34 - Mt33*z0)) + ...
         M13*(M33*(-2*M34*Mt21 + 2*Mt21*z0) + M21*(-(M34*Mt33) - M33*Mt34 + Mt33*z0))) + R2*(M21*M33*(M34*Mt14 - Mt14*z0) + M23*(M34^2*Mt11 - 2*M34*Mt11*z0 + Mt11*z0^2) + ...
         M11*(M33*(-(M34*Mt24) + Mt24*z0) + M23*(M34*Mt34 - Mt34*z0)) + M13*(-(M34^2*Mt21) + 2*M34*Mt21*z0 - Mt21*z0^2 + M21*(-(M34*Mt34) + Mt34*z0))));
     
    a9 = M32^3*R1*((-M21*Mt14 + M11*Mt24)*R2 + (-M21*Mt13 + M11*Mt23)*R2^2) + ...
         M32^2*R1*((M21*M33*Mt12 + M12*M21*Mt33 + M11*(-(M33*Mt22) - M22*Mt33))*R2^2 + ...
         R2*(M12*M21*Mt34 + M21*(M34*Mt12 - Mt12*z0) + M11*(-M34*Mt22 - M22*Mt34 + Mt22*z0))) + ...
         M32*R1*((-M12*M21*M33*Mt32 + M11*M22*M33*Mt32)*R2^2 + R2*(M11*M22*(M34*Mt32 - Mt32*z0) + M12*M21*(-M34*Mt32 + Mt32*z0)));
         
    a10 = (2*M22*M33^3*Mt11 + 2*M21*M33^3*Mt12 - 2*M12*M33^3*Mt21 - 2*M13*M21*M33^2*Mt32 + M11*(-2*M33^3*Mt22 + 2*M23*M33^2*Mt32))*R2^3 + ...
          M32^3*((-M21*Mt14 + M11*Mt24)*R2^2 + (-M21*Mt13 + M11*Mt23)*R2^3) + M32^2*((M21*M33*Mt12 + M12*M21*Mt33 + M11*(-M33*Mt22 - M22*Mt33))*R2^3 + ...
          R2^2*(M12*M21*Mt34 + M21*(M34*Mt12 - Mt12*z0) + M11*(-M34*Mt22 - M22*Mt34 + Mt22*z0))) + ...
          R2^2*(M22*M33^2*(2*M34*Mt11 - 2*Mt11*z0) + M21*M33^2*(2*M34*Mt12 - 2*Mt12*z0) + M12*M33^2*(-2*M34*Mt21 + 2*Mt21*z0) + M13*M21*M33*(-2*M34*Mt32 + 2*Mt32*z0) + ...
          M11*(M33^2*(-2*M34*Mt22 + 2*Mt22*z0) + M23*M33*(2*M34*Mt32 - 2*Mt32*z0))) + ...
          M32*((-2*M23*M33^2*Mt11 - 2*M21*M33^2*Mt13 - M12*M21*M33*Mt32 + M13*(2*M33^2*Mt21 + 2*M21*M33*Mt33) + M11*(2*M33^2*Mt23 + M22*M33*Mt32 - 2*M23*M33*Mt33))*R2^3 + ...
          R2^2*(M23*M33*(-2*M34*Mt11 + 2*Mt11*z0) + M12*M21*(-(M34*Mt32) + Mt32*z0) + M21*(-(M33^2*Mt14) + M33*(-(M34*Mt13) + Mt13*z0)) + ...
          M13*(M33*(2*M34*Mt21 - 2*Mt21*z0) + M21*(M34*Mt33 + M33*Mt34 - Mt33*z0)) + M11*(M33^2*Mt24 + M33*(M34*Mt23 - Mt23*z0) + M22*(M34*Mt32 - Mt32*z0) + ...
          M23*(-(M34*Mt33) - M33*Mt34 + Mt33*z0))));
      
end

